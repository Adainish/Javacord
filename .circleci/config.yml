version: 2

jobs:
  build:
    docker:
      - image: circleci/openjdk:8-jdk

    working_directory: ~/javacord

    steps:
      - checkout

      # restore saved caches
      - restore_cache:
          keys:
            - gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
            - gradle-wrapper

      - restore_cache:
          keys:
            - gradle-cache-{{ checksum "gradle/dependencies.gradle" }}
            - gradle-cache

      - restore_cache:
          keys:
            - gradle-build-caches-{{ .Revision }}
            - gradle-build-caches

      - run:
          name: Restoring Gradle Build Caches
          command: |
            [ -d ~/gradle-build-caches ] &&
              [ -n "$(ls -A ~/gradle-build-caches)" ] &&
              rm -rf ~/.gradle/caches/build-cache-* &&
              mv ~/gradle-build-caches/* ~/.gradle/caches/ || true

      # download and cache dependencies and Gradle
      - run:
          name: Downloading Dependencies
          command: ./gradlew downloadDependencies

      - save_cache:
          paths:
            - ~/.gradle/wrapper/
          key: gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}

      - save_cache:
          paths:
            - ~/.gradle/caches/
          key: gradle-cache-{{ checksum "gradle/dependencies.gradle" }}

      # build everything needed for publication
      - run:
          name: Building Project
          command: ./gradlew build publishToMavenLocal

      # cache gradle build caches
      - run:
          name: Collecting Gradle Build Caches
          command: |
            mkdir -p ~/gradle-build-caches
            [ -d ~/.gradle/caches ] &&
              [ -n "$(ls -Ad ~/.gradle/caches/build-cache-* 2>/dev/null)" ] &&
              mv ~/.gradle/caches/build-cache-* ~/gradle-build-caches || true

      - save_cache:
          paths:
            - ~/gradle-build-caches
          key: gradle-build-caches-{{ .Revision }}

      # store the test results
      - run:
          name: Collecting Test Results
          command: |
            mkdir ~/test-results
            mkdir ~/test-results/javacord-api
            [ -d build/javacord-api/test-results/test ] &&
              [ -n "$(ls -A build/javacord-api/test-results/test)" ] &&
              cp -a build/javacord-api/test-results/test/* ~/test-results/javacord-api || true
            mkdir ~/test-results/javacord-core
            [ -d build/javacord-core/test-results/test ] &&
              [ -n "$(ls -A build/javacord-core/test-results/test)" ] &&
              cp -a build/javacord-core/test-results/test/* ~/test-results/javacord-core || true

      - store_test_results:
          path: ~/test-results

      # store the artifacts
      - store_artifacts:
          path: build/javacord/libs/
          destination: javacord

      - store_artifacts:
          path: build/javacord-api/libs/
          destination: javacord-api

      - store_artifacts:
          path: build/javacord-api/docs/javadoc/
          destination: javacord-api/javadoc

      - store_artifacts:
          path: build/javacord-api/reports/tests/test/
          destination: javacord-api/test-report

      - store_artifacts:
          path: build/javacord-core/libs/
          destination: javacord-core

      - store_artifacts:
          path: build/javacord-core/docs/javadoc/
          destination: javacord-core/javadoc

      - store_artifacts:
          path: build/javacord-core/reports/tests/test/
          destination: javacord-core/test-report
